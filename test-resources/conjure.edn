[[:text
  [:section-header
   "                                                                     "
   [:tag "conjure"]]]
 [:text
  [:header "                    ______              _               "]]
 [:text
  [:header "                   / ____/___  ____    (_)_  __________ "]]
 [:text
  [:header
   "                  / /   / __ \\/ __ \\  / / / / / ___/ _ \\"]]
 [:text
  [:header "                 / /___/ /_/ / / / / / / /_/ / /  /  __/"]]
 [:text
  [:header
   "                 \\____/\\____/_/ /_/_/ /\\__,_/_/   \\___/ "]]
 [:text
  [:header "                                 /___/                  "]]
 [:text ""]
 [:text
  [:divider
   "=============================================================================="]]
 [:text
  [:section-header
   "CONTENTS                                                    "
   [:tag "conjure-contents"]]]
 [:text ""]
 [:text
  "    1. Introduction ............................. "
  [:ref "conjure-introduction"]
  ""]
 [:text
  "    2. Mappings ..................................... "
  [:ref "conjure-mappings"]
  ""]
 [:text
  "    3. Completion ................................. "
  [:ref "conjure-completion"]
  ""]
 [:text
  "    4. Configuration ........................... "
  [:ref "conjure-configuration"]
  ""]
 [:text
  "    5. Log ............................................... "
  [:ref "conjure-log"]
  ""]
 [:text
  "    6. Autocmds ..................................... "
  [:ref "conjure-autocmds"]
  ""]
 [:text
  "    7. Clients ....................................... "
  [:ref "conjure-clients"]
  ""]
 [:text ""]
 [:text
  [:divider
   "=============================================================================="]]
 [:text
  [:section-header
   "INTRODUCTION                                            "
   [:tag "conjure-introduction"]]]
 [:text ""]
 [:text
  "Conjure allows you to evaluate code and perform actions in various languages."]
 [:text
  "The results of your actions are stored in a log buffer that you can view and"]
 [:text "edit at any time."]
 [:text ""]
 [:text
  "If you don't have the log buffer open the results will be shown temporarily in"]
 [:text
  "the heads up display (HUD), a floating window that vanishes after you move"]
 [:text
  "your cursor. The HUD can be turned off entirely if you would rather check for"]
 [:text "results in your own time."]
 [:text ""]
 [:text
  "This documentation will show you which mappings are available by default and"]
 [:text
  "how to configure them to suit you. You'll also learn about the extra features"]
 [:text
  "and mappings that are provided by each language specific client."]
 [:text ""]
 [:text
  "You can execute "
  [:command ":ConjureSchool"]
  " to begin the interactive tutorial which will"]
 [:text "introduce you to Conjure's workflow and mappings."]
 [:text ""]
 [:text
  [:divider
   "=============================================================================="]]
 [:text
  [:section-header
   "MAPPINGS                                                    "
   [:tag "conjure-mappings"]]]
 [:text ""]
 [:text
  "These are the default mappings, "
  [:ref "conjure-configuration"]
  " will show you how to"]
 [:text
  "remap them to keys that suit you if required. The default prefix key for"]
 [:text
  "almost all of the mappings is "
  [:command "<localleader>"]
  " ("
  [:ref "maplocalleader"]
  ")."]
 [:text ""]
 [:text
  "If you already have a buffer open and you change a mapping's configuration it"]
 [:text
  "won't update right away. Mappings are defined as you open a buffer, so be sure"]
 [:text
  "to set up your mappings in your Neovim configuration or at least before you"]
 [:text "open a buffer."]
 [:text ""]
 [:text
  "I've also included some commands since they're related to the mappings."]
 [:text ""]
 [:text
  [:section-header
   "                                                              "
   [:tag ":ConjureSchool"]]]
 [:text
  ":ConjureSchool           Start the interactive tutorial which will walk you"]
 [:text
  "                         through the workflow and mappings Conjure provides."]
 [:text ""]
 [:text
  [:section-header
   "                                                                "
   [:tag ":ConjureEval"]]]
 [:text
  ":ConjureEval [code]      Evaluates the given code in the current buffer's"]
 [:text
  "                         language and context. Accepts a range so"]
 [:text
  "                         "
  [:command ":%ConjureEval"]
  " would evaluate the entire buffer,"]
 [:text
  "                         this also works with visual selections."]
 [:text ""]
 [:text
  [:section-header
   "                                                             "
   [:tag ":ConjureConnect"]]]
 [:text ":ConjureConnect [host] [port]"]
 [:text
  "                         Connect to the given host and port. Both arguments"]
 [:text
  "                         tend to be optional but this can vary depending on"]
 [:text
  "                         the client. Only clients with network based REPL"]
 [:text
  "                         connections will provide implementations for this."]
 [:text "                         " [:command ":ConjureConnect"] ""]
 [:text
  "                         "
  [:command ":ConjureConnect 5678"]
  ""]
 [:text
  "                         "
  [:command ":ConjureConnect staging.my-app.com 5678"]
  ""]
 [:text ""]
 [:text
  [:section-header
   "                                                         "
   [:tag ":ConjureClientState"]]]
 [:text ":ConjureClientState [state-key]"]
 [:text
  "                         Get or set (if an argument is provided) the current"]
 [:text
  "                         client state key. This defaults to "
  [:command "default"]
  " and can"]
 [:text
  "                         be used to have a connection per current working"]
 [:text
  "                         directory (or any other unique string of your"]
 [:text
  "                         choice!). Set up auto commands to suit your needs."]
 [:example
  "                         augroup conjure_set_state_key_on_dir_changed\n                           autocmd!\n                           autocmd DirChanged * execute \"ConjureClientState \" . getcwd()\n                         augroup END"]
 [:text
  "<localleader>ls          Open the log buffer in a new horizontal split window."]
 [:text
  "                         The direction can be controlled with "
  [:ref "splitbelow"]
  "."]
 [:text ""]
 [:text
  "<localleader>lv          Open the log buffer in a new vertical split window."]
 [:text
  "                         The direction can be controlled with "
  [:ref "splitright"]
  "."]
 [:text ""]
 [:text
  "<localleader>lt          Open the log buffer in a new tab. Great for viewing"]
 [:text
  "                         large output. Just close the window to close the tab"]
 [:text
  "                         when you're done and return to your previous layout."]
 [:text ""]
 [:text
  "<localleader>le          Open the log buffer in your current window. Just"]
 [:text
  "                         jump back (with e.g. "
  [:ref "Ctrl-O"]
  ") when you're done and"]
 [:text "                         return to your previous buffer."]
 [:text ""]
 [:text
  "<localleader>lq          Close all visible log windows in your current tab."]
 [:text "                         Other tabs will remain unaffected."]
 [:text ""]
 [:text
  "<localleader>lr          Soft reset the log buffer by deleting the lines while"]
 [:text
  "                         leaving any wider buffer state intact. This will"]
 [:text "                         leave any open log windows open."]
 [:text ""]
 [:text
  "<localleader>lR          Hard reset the log buffer, completely deleting the"]
 [:text
  "                         buffer, mappings and buffer local settings. This will"]
 [:text "                         close any open log windows."]
 [:text ""]
 [:text
  "<localleader>ll          Set cursor to top of latest evaluation result."]
 [:text ""]
 [:text
  "<localleader>E           When in visual mode, evaluate the current selection."]
 [:text ""]
 [:text
  "<localleader>E[motion]   Evaluate any given motion following this mapping such"]
 [:text
  "                         as <localleader>"
  [:command "E2j"]
  " to evaluate this line and the"]
 [:text "                         two below it."]
 [:text ""]
 [:text
  "<localleader>ee          Evaluate the current form under the cursor. This is"]
 [:text
  "                         the innermost pair (ignoring those in comments or"]
 [:text
  "                         strings). "
  [:command "g:conjure#extract#form_pairs"]
  " controls the"]
 [:text "                         character pairs."]
 [:text ""]
 [:text
  "<localleader>ece         Evaluates the form under the cursor and displays the"]
 [:text
  "                         result as a comment at the end of the line or below"]
 [:text
  "                         the current line if you already have a comment there."]
 [:text ""]
 [:text
  "<localleader>er          Evaluate the root form under the cursor. This is the"]
 [:text
  "                         outermost pair. Great for evaluating a function"]
 [:text
  "                         you're editing if your cursor is within a few nested"]
 [:text
  "                         forms. "
  [:command "g:conjure#extract#form_pairs"]
  " controls the"]
 [:text "                         character pairs."]
 [:text ""]
 [:text
  "<localleader>ecr         Evaluates the root form under the cursor and displays the"]
 [:text
  "                         result as a comment at the end of the line or below"]
 [:text
  "                         the current line if you already have a comment there."]
 [:text ""]
 [:text
  "<localleader>ew          Evaluate the word under the cursor, good for peeking"]
 [:text "                         inside vars defined in your file."]
 [:text ""]
 [:text
  "<localleader>ecw         Evaluates the word under the cursor and displays the"]
 [:text
  "                         result as a comment at the end of the line or below"]
 [:text
  "                         the current line if you already have a comment there."]
 [:text ""]
 [:text
  "<localleader>e!          Evaluate the form under the cursor and replace it"]
 [:text
  "                         with the result of the evaluation. Using this on the"]
 [:text
  "                         form "
  [:command "(+ 10 20)"]
  " would replace the form with "
  [:command "30"]
  "."]
 [:text ""]
 [:text
  "<localleader>em[mark]    Evaluate the form under the cursor at the given"]
 [:text
  "                         "
  [:ref "mark"]
  ". Set a regular Neovim mark on a form using"]
 [:text
  "                         "
  [:command "mF"]
  " for example in any file, then jump to another"]
 [:text
  "                         file. You can evaluate that form at any time with"]
 [:text "                         " [:command "<localleader>emF"] "."]
 [:text ""]
 [:text
  "<localleader>ef          Evaluate the current file from disk. This may be"]
 [:text
  "                         different to what's currently in your buffer if you"]
 [:text "                         haven't saved!"]
 [:text ""]
 [:text
  "<localleader>eb          Evaluate the current buffer contents. This may be"]
 [:text
  "                         different to what's on disk if you've edited it"]
 [:text "                         without saving."]
 [:text ""]
 [:text
  "<localleader>gd          Go to the definition of the word under the cursor."]
 [:text
  "                         Support for this may vary between languages."]
 [:text ""]
 [:text
  "K                        Look up documentation for the word under the cursor."]
 [:text
  "                         Support for this may vary between languages."]
 [:text ""]
 [:text
  "Language clients will provide their own extra mappings on top of these, you"]
 [:text
  "can find links to their help in "
  [:ref "conjure-clients"]
  "."]
 [:text ""]
 [:text
  [:divider
   "=============================================================================="]]
 [:text
  [:section-header
   "COMPLETION                                                "
   [:tag "conjure-completion"]]]
 [:text ""]
 [:text
  "Conjure sets the "
  [:ref "omnifunc"]
  " for all supported languages, the language clients"]
 [:text
  "must implement completion for it to actually provide results. Some languages"]
 [:text
  "will provide rich completion, others will provide simpler completions based on"]
 [:text
  "the syntax file of the language and the current symbols visible in the buffer."]
 [:text ""]
 [:text
  "You can get completions through the normal mapping of "
  [:command "<C-x><C-o>"]
  ", nothing"]
 [:text "else needs to be configured for this to work."]
 [:text ""]
 [:text
  "The "
  [:ref "omnifunc"]
  " used is configurable via the "
  [:command "g:conjure#completion..."]
  " options."]
 [:text ""]
 [:text
  "Automatic completion as you type is provided by external plugins. Deoplete"]
 [:text
  "support is built into the Conjure plugin, so if you have Deoplete installed it"]
 [:text "should be working already."]
 [:text ""]
 [:text " * " [:url "https://github.com/Shougo/deoplete.nvim"] ""]
 [:text ""]
 [:text "Conquerer of Completion support is provided by coc-conjure."]
 [:text ""]
 [:text " * " [:url "https://github.com/neoclide/coc.nvim"] ""]
 [:text " * " [:url "https://github.com/jlesquembre/coc-conjure"] ""]
 [:text ""]
 [:text
  "asyncomplete.vim support is provided by asyncomplete-conjure.vim."]
 [:text ""]
 [:text
  " * "
  [:url "https://github.com/prabirshrestha/asyncomplete.vim"]
  ""]
 [:text
  " * "
  [:url "https://github.com/thecontinium/asyncomplete-conjure.vim"]
  ""]
 [:text ""]
 [:text "compe-nvim support is provided by compe-conjure."]
 [:text ""]
 [:text " * " [:url "https://github.com/hrsh7th/nvim-compe"] ""]
 [:text " * " [:url "https://github.com/tami5/compe-conjure"] ""]
 [:text ""]
 [:text
  [:divider
   "=============================================================================="]]
 [:text
  [:section-header
   "CONFIGURATION                                          "
   [:tag "conjure-configuration"]]]
 [:text ""]
 [:text
  "Conjure is configured through global vars such as "
  [:command "g:conjure#debug"]
  ", you can"]
 [:text
  "set these with normal VimL "
  [:command "let"]
  " expressions. Here's the full list of options"]
 [:text
  "available in the core plugin. Each language client also has its own set of"]
 [:text "mappings and settings you can alter."]
 [:text ""]
 [:text
  "You can also set "
  [:command "b:"]
  " prefixed versions of all configuration values for buffer"]
 [:text "local settings that override their global counterparts."]
 [:text ""]
 [:text
  "As an example, we can change the default prefix from "
  [:command "<localleader>"]
  " to "
  [:command ",c"]
  ""]
 [:text "with the following command:"]
 [:example "    :let g:conjure#mapping#prefix = \",c\"\n"]
 [:text
  "All mappings are prefixed by this by default. To have a mapping work without"]
 [:text "the prefix simply wrap the string in a list."]
 [:example "    :let g:conjure#mapping#log_split = [\"ClS\"]\n"]
 [:text
  "Now you can hit "
  [:command "ClS"]
  " without a prefix in any buffer Conjure has a client for."]
 [:text ""]
 [:text
  "You can disable a mapping entirely by setting it to "
  [:command "v:false"]
  " like so."]
 [:example "    :let g:conjure#mapping#doc_word = v:false\n"]
 [:text
  "These need to be set before you enter a relevant buffer since the mappings are"]
 [:text
  "defined as you enter a buffer and can't be altered after the fact."]
 [:text ""]
 [:text
  "Tip: Booleans in Vim Script are written as "
  [:command "v:true"]
  " and "
  [:command "v:false"]
  "."]
 [:text ""]
 [:text
  [:section-header
   "                                                         "
   [:tag "g:conjure#filetypes"]]]
 [:text "" [:command "g:conjure#filetypes"] ""]
 [:text
  "            A list of filetypes Conjure should be associated with. Conjure"]
 [:text
  "            will then look up which client module to use for this filetype"]
 [:text
  "            using "
  [:command "g:conjure#filetype#[filetype]"]
  ", which should be a string"]
 [:text
  "            that resolves to a Lua module that adheres to the"]
 [:text "            " [:ref "conjure-clients"] " interface."]
 [:text ""]
 [:text
  "            Conjure will only initialise for filetypes in this list. It also"]
 [:text
  "            will not load if the file type is in this list but there isn't an"]
 [:text
  "            equivalent "
  [:command "g:conjure#filetype#[filetype]"]
  " configuration value."]
 [:text ""]
 [:text
  "            Default: "
  [:command
   "[\"clojure\", \"fennel\", \"janet\", \"racket\", \"scheme\"]"]
  ""]
 [:text ""]
 [:text
  [:section-header
   "                                                  "
   [:tag "g:conjure#filetype#clojure"]]]
 [:text "" [:command "g:conjure#filetype#clojure"] ""]
 [:text
  "            Client to use for "
  [:command "clojure"]
  " buffers."]
 [:text "            Help: " [:ref "conjure-client-clojure-nrepl"] ""]
 [:text
  "            Default: "
  [:command "\"conjure.client.clojure.nrepl\""]
  ""]
 [:text ""]
 [:text
  [:section-header
   "                                                   "
   [:tag "g:conjure#filetype#fennel"]]]
 [:text "" [:command "g:conjure#filetype#fennel"] ""]
 [:text
  "            Client to use for "
  [:command "fennel"]
  " buffers. Conjure also ships with an"]
 [:text
  "            alternative "
  [:command "\"conjure.client.fennel.stdio\""]
  " client which allows"]
 [:text
  "            you to work with Fennel (without Aniseed) outside of Neovim in an"]
 [:text "            external Lua process."]
 [:text
  "            Help: "
  [:ref "conjure-client-fennel-aniseed"]
  ", "
  [:ref "conjure-client-fennel-stdio"]
  ""]
 [:text
  "            Default: "
  [:command "\"conjure.client.fennel.aniseed\""]
  ""]
 [:text ""]
 [:text
  [:section-header
   "                                                    "
   [:tag "g:conjure#filetype#janet"]]]
 [:text "" [:command "g:conjure#filetype#janet"] ""]
 [:text
  "            Client to use for "
  [:command "janet"]
  " buffers."]
 [:text "            Help: " [:ref "conjure-client-janet-netrepl"] ""]
 [:text
  "            Default: "
  [:command "\"conjure.client.janet.netrepl\""]
  ""]
 [:text ""]
 [:text
  [:section-header
   "                                                       "
   [:tag "g:conjure#filetype#hy"]]]
 [:text "" [:command "g:conjure#filetype#hy"] ""]
 [:text "            Client to use for " [:command "hy"] " buffers."]
 [:text "            Help: " [:ref "conjure-client-hy-stdio"] ""]
 [:text
  "            Default: "
  [:command "\"conjure.client.hy.stdio\""]
  ""]
 [:text ""]
 [:text
  [:section-header
   "                                                   "
   [:tag "g:conjure#filetype#scheme"]]]
 [:text "" [:command "g:conjure#filetype#scheme"] ""]
 [:text
  "            Client to use for "
  [:command "scheme"]
  " buffers. You can use Guile over a"]
 [:text "            socket file instead by setting this to"]
 [:text
  "            "
  [:command "\"conjure.client.guile.socket\""]
  "."]
 [:text
  "            Help: "
  [:ref "conjure-client-scheme-stdio"]
  ", "
  [:ref "conjure-client-guile-socket"]
  ""]
 [:text
  "            Default: "
  [:command "\"conjure.client.scheme.stdio\""]
  ""]
 [:text ""]
 [:text
  [:section-header
   "                                                   "
   [:tag "g:conjure#filetype#racket"]]]
 [:text "" [:command "g:conjure#filetype#racket"] ""]
 [:text
  "            Client to use for "
  [:command "racket"]
  " buffers."]
 [:text "            Help: " [:ref "conjure-client-racket-stdio"] ""]
 [:text
  "            Default: "
  [:command "\"conjure.client.racket.stdio\""]
  ""]
 [:text ""]
 [:text
  [:section-header
   "                                      "
   [:tag "g:conjure#filetype_suffixes#[filetype]"]]]
 [:text "" [:command "g:conjure#filetype_suffixes#[filetype]"] ""]
 [:text
  "            If a client is loading when it shouldn't we can configure that"]
 [:text
  "            filetype to match a specific set of file extensions. This is"]
 [:text
  "            useful in the Scheme / Racket / Guile world where they share"]
 [:text
  "            filetype strings and extentions in a lot of places, making it"]
 [:text
  "            difficult to determine which client we should use."]
 [:text "            Default: " [:command "nil"] ""]
 [:text ""]
 [:text
  [:section-header
   "                                          "
   [:tag "g:conjure#filetype_suffixes#racket"]]]
 [:text "" [:command "g:conjure#filetype_suffixes#racket"] ""]
 [:text
  "            Racket filetype support cycles between the "
  [:command "scheme"]
  " and "
  [:command "racket"]
  ""]
 [:text
  "            filetypes at times, this list restricts the Racket client to the"]
 [:text "            right paths as well as filetypes."]
 [:text "            Default: " [:command "[\"rkt\"]"] ""]
 [:text ""]
 [:text
  [:section-header
   "                                          "
   [:tag "g:conjure#filetype_suffixes#scheme"]]]
 [:text "" [:command "g:conjure#filetype_suffixes#scheme"] ""]
 [:text
  "            We don't want the Scheme client to activate for Racket or Guile"]
 [:text
  "            buffers, which both sometimes flick their filetype to "
  [:command "scheme"]
  ""]
 [:text
  "            just to try and confuse us. But we're ready for it!"]
 [:text "            Default: " [:command "[\"scm\"]"] ""]
 [:text ""]
 [:text
  [:section-header
   "                                              "
   [:tag "g:conjure#eval#result_register"]]]
 [:text "" [:command "g:conjure#eval#result_register"] ""]
 [:text
  "            Every evaluation captures the result and places it in a Neovim"]
 [:text
  "            register for you to use however you want. By default, if you"]
 [:text
  "            evaluate a form, you can then hit "
  [:command "\"cp"]
  " to paste the result into"]
 [:text
  "            your buffer or "
  [:command "<C-r>c"]
  " in insert mode. Some suggestions of other"]
 [:text "            registers you can set this to:"]
 [:text
  "             * "
  [:command "\"\\\"\""]
  " or "
  [:command "\"*\""]
  " the default register for easy access."]
 [:text
  "             * "
  [:command "\"C\""]
  " if you want to keep your lower case registers clear."]
 [:text
  "             * "
  [:command "\"_\""]
  " the black hole when you don't want this at all."]
 [:text "            Default: " [:command "\"c\""] ""]
 [:text ""]
 [:text
  [:section-header
   "                                               "
   [:tag "g:conjure#eval#inline_results"]]]
 [:text "" [:command "g:conjure#eval#inline_results"] ""]
 [:text
  "            Displays the results of evaluations inline as virtual text at the"]
 [:text
  "            end of the line where the evaluation was initiated."]
 [:text "            Example: " [:command "(+ 10 20) => 30"] ""]
 [:text "            Default: " [:command "true"] ""]
 [:text ""]
 [:text
  [:section-header
   "                                               "
   [:tag "g:conjure#eval#inline#highlight"]]]
 [:text "" [:command "g:conjure#eval#inline#highlight"] ""]
 [:text
  "            Sets the highlight group used for the inline results"]
 [:text "            Example: " [:command "\"EndOfBuffer\""] ""]
 [:text "            Default: " [:command "\"Comment\""] ""]
 [:text ""]
 [:text
  [:section-header
   "                                               "
   [:tag "g:conjure#eval#inline#prefix"]]]
 [:text "" [:command "g:conjure#eval#inline#prefix"] ""]
 [:text "            Sets the prefix used in the inline results"]
 [:text "            Example: " [:command "\"-> \""] ""]
 [:text "            Default: " [:command "\"=> \""] ""]
 [:text ""]
 [:text
  [:section-header
   "                                               "
   [:tag "g:conjure#eval#comment_prefix"]]]
 [:text "" [:command "g:conjure#eval#comment_prefix"] ""]
 [:text
  "            The comment prefix to use for \"eval and insert result as comment\""]
 [:text
  "            mappings. Defaults to whatever comment character (normally"]
 [:text
  "            singular) the language uses, such as "
  [:command "\"; \""]
  ", if you would like two"]
 [:text
  "            character comments, you can set this to "
  [:command "\";; \""]
  " (note the trailing"]
 [:text "            space!)."]
 [:text
  "            Default: "
  [:command "nil"]
  " (whatever comment character the language uses)"]
 [:text ""]
 [:text
  [:section-header
   "                                                        "
   [:tag "g:conjure#eval#gsubs"]]]
 [:text "" [:command "g:conjure#eval#gsubs"] ""]
 [:text
  "            Lua "
  [:command "string.gsub"]
  " modifications to make to code before it's"]
 [:text
  "            evaluated. For example, the following will mean you can evaluate"]
 [:text
  "            "
  [:command "comment"]
  " forms as "
  [:command "do"]
  " forms."]
 [:text "           "]
 [:example
  "              let g:conjure#eval#gsubs = {'do-comment': ['^%(comment[%s%c]', '(do ']}"]
 [:text
  "            The first value in the list is a Lua pattern to match against and"]
 [:text
  "            the second is the replacement value. When using the root form eval"]
 [:text
  "            within a comment form Conjure will now execute all forms contained"]
 [:text "            within it."]
 [:text ""]
 [:text
  "            The keys of your value pairs are purely for documentation, you'll"]
 [:text
  "            only see them in error messages if something goes wrong. If a"]
 [:text
  "            pattern throws an error for some reason Conjure will still proceed"]
 [:text
  "            with the evaluation (without the substitution) but will log the"]
 [:text "            error."]
 [:text ""]
 [:text
  "            More on Lua patterns: "
  [:url "https://www.lua.org/pil/20.2.html"]
  ""]
 [:text ""]
 [:text
  [:section-header
   "                                                    "
   [:tag "g:conjure#mapping#prefix"]]]
 [:text "" [:command "g:conjure#mapping#prefix"] ""]
 [:text "            The key that proceeds most mappings."]
 [:text "            Default: " [:command "\"<localleader>\""] ""]
 [:text ""]
 [:text
  [:section-header
   "                                                 "
   [:tag "g:conjure#mapping#log_split"]]]
 [:text "" [:command "g:conjure#mapping#log_split"] ""]
 [:text "            Opens the log in a horizontal split."]
 [:text "            Default: " [:command "\"ls\""] ""]
 [:text ""]
 [:text
  [:section-header
   "                                                "
   [:tag "g:conjure#mapping#log_vsplit"]]]
 [:text "" [:command "g:conjure#mapping#log_vsplit"] ""]
 [:text "            Opens the log in a vertical split."]
 [:text "            Default: " [:command "\"lv\""] ""]
 [:text ""]
 [:text
  [:section-header
   "                                                   "
   [:tag "g:conjure#mapping#log_tab"]]]
 [:text "" [:command "g:conjure#mapping#log_tab"] ""]
 [:text "            Opens the log in a new tab."]
 [:text "            Default: " [:command "\"lt\""] ""]
 [:text ""]
 [:text
  [:section-header
   "                                                   "
   [:tag "g:conjure#mapping#log_buf"]]]
 [:text "" [:command "g:conjure#mapping#log_buf"] ""]
 [:text "            Opens the log in the current window."]
 [:text "            Default: " [:command "\"le\""] ""]
 [:text ""]
 [:text
  [:section-header
   "                                                "
   [:tag "g:conjure#mapping#log_toggle"]]]
 [:text "" [:command "g:conjure#mapping#log_toggle"] ""]
 [:text
  "            Toggles open or closed the log, using the last used log open"]
 [:text
  "            command. This will only work for vertical or horizontal split"]
 [:text "            log windows."]
 [:text "            Default: " [:command "\"lg\""] ""]
 [:text ""]
 [:text
  [:section-header
   "                                            "
   [:tag "g:conjure#mapping#log_reset_soft"]]]
 [:text "" [:command "g:conjure#mapping#log_reset_soft"] ""]
 [:text
  "            Soft reset the log buffer by wiping the contents."]
 [:text "            Default: " [:command "\"lr\""] ""]
 [:text ""]
 [:text
  [:section-header
   "                                            "
   [:tag "g:conjure#mapping#log_reset_hard"]]]
 [:text "" [:command "g:conjure#mapping#log_reset_hard"] ""]
 [:text
  "            Hard reset the log buffer by deleting the entire buffer."]
 [:text "            Default: " [:command "\"lR\""] ""]
 [:text ""]
 [:text
  [:section-header
   "                                        "
   [:tag "g:conjure#mapping#log_jump_to_latest"]]]
 [:text "" [:command "g:conjure#mapping#log_jump_to_latest"] ""]
 [:text "            Set cursor to top of latest evaluation result."]
 [:text "            Default: " [:command "\"ll\""] ""]
 [:text ""]
 [:text
  [:section-header
   "                                         "
   [:tag "g:conjure#mapping#log_close_visible"]]]
 [:text "" [:command "g:conjure#mapping#log_close_visible"] ""]
 [:text "            Close all visible log windows."]
 [:text "            Default: " [:command "\"lq\""] ""]
 [:text ""]
 [:text
  [:section-header
   "                                         "
   [:tag "g:conjure#mapping#eval_current_form"]]]
 [:text "" [:command "g:conjure#mapping#eval_current_form"] ""]
 [:text "            Evaluates the form under the cursor."]
 [:text "            Default: " [:command "\"ee\""] ""]
 [:text ""]
 [:text
  [:section-header
   "                                 "
   [:tag "g:conjure#mapping#eval_comment_current_form"]]]
 [:text "" [:command "g:conjure#mapping#eval_comment_current_form"] ""]
 [:text
  "            Evaluates the form under the cursor and inserts the result as a"]
 [:text "            comment."]
 [:text "            Default: " [:command "\"ece\""] ""]
 [:text ""]
 [:text
  [:section-header
   "                                            "
   [:tag "g:conjure#mapping#eval_root_form"]]]
 [:text "" [:command "g:conjure#mapping#eval_root_form"] ""]
 [:text "            Evaluates the root form under the cursor."]
 [:text "            Default: " [:command "\"er\""] ""]
 [:text ""]
 [:text
  [:section-header
   "                                    "
   [:tag "g:conjure#mapping#eval_comment_root_form"]]]
 [:text "" [:command "g:conjure#mapping#eval_comment_root_form"] ""]
 [:text
  "            Evaluates the root form under the cursor and inserts the result as"]
 [:text "            a comment."]
 [:text "            Default: " [:command "\"ecr\""] ""]
 [:text ""]
 [:text
  [:section-header
   "                                                 "
   [:tag "g:conjure#mapping#eval_word"]]]
 [:text "" [:command "g:conjure#mapping#eval_word"] ""]
 [:text "            Evaluates the word under the cursor."]
 [:text "            Default: " [:command "\"ew\""] ""]
 [:text ""]
 [:text
  [:section-header
   "                                         "
   [:tag "g:conjure#mapping#eval_comment_word"]]]
 [:text "" [:command "g:conjure#mapping#eval_comment_word"] ""]
 [:text
  "            Evaluates the word under the cursor and inserts the result as a"]
 [:text "            comment."]
 [:text "            Default: " [:command "\"ecw\""] ""]
 [:text ""]
 [:text
  [:section-header
   "                                         "
   [:tag "g:conjure#mapping#eval_replace_form"]]]
 [:text "" [:command "g:conjure#mapping#eval_replace_form"] ""]
 [:text
  "            Evaluates the form under the cursor and replace with the result."]
 [:text "            Default: " [:command "\"e!\""] ""]
 [:text ""]
 [:text
  [:section-header
   "                                          "
   [:tag "g:conjure#mapping#eval_marked_form"]]]
 [:text "" [:command "g:conjure#mapping#eval_marked_form"] ""]
 [:text "            Evaluates the form at the marks location."]
 [:text "            Default: " [:command "\"em\""] ""]
 [:text ""]
 [:text
  [:section-header
   "                                         "
   [:tag "g:conjure#mapping#eval_comment_form"]]]
 [:text "" [:command "g:conjure#mapping#eval_comment_form"] ""]
 [:text
  "            Evaluates the form under the cursor and displays the result as a"]
 [:text
  "            comment at the end of the current line or below the current line."]
 [:text "            Default: " [:command "\"ec\""] ""]
 [:text ""]
 [:text
  [:section-header
   "                                                 "
   [:tag "g:conjure#mapping#eval_file"]]]
 [:text "" [:command "g:conjure#mapping#eval_file"] ""]
 [:text "            Evaluates the file from disk."]
 [:text "            Default: " [:command "\"ef\""] ""]
 [:text ""]
 [:text
  [:section-header
   "                                                  "
   [:tag "g:conjure#mapping#eval_buf"]]]
 [:text "" [:command "g:conjure#mapping#eval_buf"] ""]
 [:text "            Evaluates the buffer from memory."]
 [:text "            Default: " [:command "\"eb\""] ""]
 [:text ""]
 [:text
  [:section-header
   "                                               "
   [:tag "g:conjure#mapping#eval_visual"]]]
 [:text "" [:command "g:conjure#mapping#eval_visual"] ""]
 [:text "            Evaluates the visual selection."]
 [:text "            Default: " [:command "\"E\""] ""]
 [:text ""]
 [:text
  [:section-header
   "                                               "
   [:tag "g:conjure#mapping#eval_motion"]]]
 [:text "" [:command "g:conjure#mapping#eval_motion"] ""]
 [:text "            Evaluates the following motion."]
 [:text "            Default: " [:command "\"E\""] ""]
 [:text ""]
 [:text
  [:section-header
   "                                                  "
   [:tag "g:conjure#mapping#def_word"]]]
 [:text "" [:command "g:conjure#mapping#def_word"] ""]
 [:text
  "            Goes to the definition of the word under the cursor."]
 [:text "            Default: " [:command "\"gd\""] ""]
 [:text ""]
 [:text
  [:section-header
   "                                                  "
   [:tag "g:conjure#mapping#doc_word"]]]
 [:text "" [:command "g:conjure#mapping#doc_word"] ""]
 [:text
  "            Looks up documentation for the word under the cursor."]
 [:text "            Default: " [:command "[\"K\"]"] ""]
 [:text ""]
 [:text
  [:section-header
   "                                               "
   [:tag "g:conjure#completion#omnifunc"]]]
 [:text "" [:command "g:conjure#completion#omnifunc"] ""]
 [:text
  "            "
  [:ref "omnifunc"]
  " to set for supported Conjure clients. No omnicompletion"]
 [:text
  "            will be provided if you set this to "
  [:command "nil"]
  "."]
 [:text "            Default: " [:command "\"ConjureOmnifunc\""] ""]
 [:text ""]
 [:text
  [:section-header
   "                                               "
   [:tag "g:conjure#completion#fallback"]]]
 [:text "" [:command "g:conjure#completion#fallback"] ""]
 [:text
  "            "
  [:ref "omnifunc"]
  " to use if the client isn't returning completions,"]
 [:text
  "            requires "
  [:command "completion#omnifunc"]
  " to be set to "
  [:command "\"ConjureOmnifunc\""]
  ". For"]
 [:text
  "            Janet and Racket, this is the main completion method, for Clojure"]
 [:text
  "            this kicks in if you don't have an nREPL connection yet."]
 [:text
  "            Default: "
  [:command "\"syntaxcomplete#Complete\""]
  ""]
 [:text ""]
 [:text
  [:section-header
   "                                                 "
   [:tag "g:conjure#highlight#enabled"]]]
 [:text "" [:command "g:conjure#highlight#enabled"] ""]
 [:text
  "            Enable highlighting of evaluated forms. Requires support for the"]
 [:text "            highlight API, so you'll need Neovim 0.5+."]
 [:text "            Default: " [:command "false"] ""]
 [:text ""]
 [:text
  [:section-header
   "                                                   "
   [:tag "g:conjure#highlight#group"]]]
 [:text "" [:command "g:conjure#highlight#group"] ""]
 [:text
  "            Which syntax group should the form be highlighted with."]
 [:text "            Default: " [:command "\"IncSearch\""] ""]
 [:text ""]
 [:text
  [:section-header
   "                                                 "
   [:tag "g:conjure#highlight#timeout"]]]
 [:text "" [:command "g:conjure#highlight#timeout"] ""]
 [:text
  "            How long should the highlight last in milliseconds."]
 [:text "            Default: " [:command "500"] ""]
 [:text ""]
 [:text
  [:section-header
   "                                                     "
   [:tag "g:conjure#log#hud#width"]]]
 [:text "" [:command "g:conjure#log#hud#width"] ""]
 [:text
  "            Width of the HUD as a percentage of the editor width."]
 [:text "            A float between 0.0 and 1.0."]
 [:text "            Default: " [:command "0.42"] ""]
 [:text ""]
 [:text
  [:section-header
   "                                                    "
   [:tag "g:conjure#log#hud#height"]]]
 [:text "" [:command "g:conjure#log#hud#height"] ""]
 [:text
  "            Height of the HUD as a percentage of the editor height."]
 [:text "            A float between 0.0 and 1.0."]
 [:text "            Default: " [:command "0.3"] ""]
 [:text ""]
 [:text
  [:section-header
   "                                                   "
   [:tag "g:conjure#log#hud#enabled"]]]
 [:text "" [:command "g:conjure#log#hud#enabled"] ""]
 [:text "            Should the HUD be displayed at all."]
 [:text "            Default: " [:command "true"] ""]
 [:text ""]
 [:text
  [:section-header
   "                                       "
   [:tag "g:conjure#log#hud#passive_close_delay"]]]
 [:text "" [:command "g:conjure#log#hud#passive_close_delay"] ""]
 [:text
  "            Delay to introduce (in milliseconds) when closing the HUD"]
 [:text
  "            passively such as after you move the cursor. Set it to "
  [:command "0"]
  " to"]
 [:text
  "            disable the mechanic entirely and close instantly."]
 [:text "            Default: " [:command "0"] ""]
 [:text ""]
 [:text
  [:section-header
   "                                       "
   [:tag "g:conjure#log#hud#minimum_lifetime_ms"]]]
 [:text "" [:command "g:conjure#log#hud#minimum_lifetime_ms"] ""]
 [:text
  "            A minimum amount of milliseconds that must have passed since the"]
 [:text
  "            HUD opened before it'll be passively closed from cursor movement."]
 [:text
  "            This delay means evaluations that involve cursor movement etc"]
 [:text "            won't close the HUD the moment it displays."]
 [:text "            Default: " [:command "20"] ""]
 [:text ""]
 [:text
  [:section-header
   "                                           "
   [:tag "g:conjure#log#hud#overlap_padding"]]]
 [:text "" [:command "g:conjure#log#hud#overlap_padding"] ""]
 [:text
  "            Extra space checked around the HUD window for the cursor. If it's"]
 [:text
  "            within this padded boundary (too close to the HUD) it'll move to"]
 [:text
  "            the opposite side of the screen to stay out of the way."]
 [:text "            A float between 0.0 and 1.0."]
 [:text "            Default: " [:command "0.1"] ""]
 [:text ""]
 [:text
  [:section-header
   "                                                    "
   [:tag "g:conjure#log#hud#anchor"]]]
 [:text "" [:command "g:conjure#log#hud#anchor"] ""]
 [:text
  "            Preferred corner position for the HUD. This is not guaranteed, it"]
 [:text
  "            will try to move out of the way to avoid covering your cursor and"]
 [:text "            the code you're reading."]
 [:text
  "            Example: Set this to "
  [:command "\"SE\""]
  " and the width to "
  [:command "1.0"]
  " to get a full"]
 [:text "            window width HUD at the bottom of the screen."]
 [:text "            Default: " [:command "\"NE\""] ""]
 [:text ""]
 [:text
  [:section-header
   "                                                    "
   [:tag "g:conjure#log#hud#border"]]]
 [:text "" [:command "g:conjure#log#hud#border"] ""]
 [:text
  "            Preferred border style for the HUD. Possible values are the same"]
 [:text
  "            as the "
  [:command "border"]
  " parameter in "
  [:command ":h nvim_open_win()"]
  ". Set this to"]
 [:text
  "            "
  [:command "\"none\""]
  " if you don't want a border."]
 [:text "            Default: " [:command "\"single\""] ""]
 [:text ""]
 [:text
  [:section-header
   "                                       "
   [:tag "g:conjure#log#hud#ignore_low_priority"]]]
 [:text "" [:command "g:conjure#log#hud#ignore_low_priority"] ""]
 [:text
  "            Don't display the HUD for \"low priority\" messages. This includes"]
 [:text
  "            "
  [:command "stdout"]
  " and "
  [:command "stderr"]
  " for Clojure, this support varies from"]
 [:text
  "            language to language drastically depending on the information each"]
 [:text
  "            REPL can offer Conjure. Most languages only have standard priority"]
 [:text
  "            messages, there is no distinction between low and anything else."]
 [:text ""]
 [:text
  "            If your HUD is constantly displaying because of low priority"]
 [:text
  "            messages you'll see a warning, once, telling you about this"]
 [:text
  "            option. You can then set the option during a session to improve"]
 [:text "            your experience with particularly noisy REPLs."]
 [:text ""]
 [:text
  "            The following snippet will set this to true and suppress low"]
 [:text
  "            priority output from the HUD, just in case you're in a rush:"]
 [:text "           "]
 [:example
  "              :let g:conjure#log#hud#ignore_low_priority = v:true"]
 [:text "            Default: " [:command "false"] ""]
 [:text ""]
 [:text
  [:section-header
   "                                                      "
   [:tag "g:conjure#log#botright"]]]
 [:text "" [:command "g:conjure#log#botright"] ""]
 [:text
  "            Force the log to always open at the bottom or far right of the"]
 [:text
  "            editor, taking up the full width or height respectively."]
 [:text "            Default: " [:command "false"] ""]
 [:text ""]
 [:text
  [:section-header
   "                                                  "
   [:tag "g:conjure#log#break_length"]]]
 [:text "" [:command "g:conjure#log#break_length"] ""]
 [:text
  "            Length of the break comment ("
  [:command "; ---------..."]
  ") between log results"]
 [:text
  "            in characters. Used in trimming to avoid cutting forms in half."]
 [:text "            Default: " [:command "80"] ""]
 [:text ""]
 [:text
  [:section-header
   "                                                       "
   [:tag "g:conjure#log#trim#at"]]]
 [:text "" [:command "g:conjure#log#trim#at"] ""]
 [:text
  "            Trim the log once the line count passes the value."]
 [:text "            Default: " [:command "10000"] ""]
 [:text ""]
 [:text
  [:section-header
   "                                                       "
   [:tag "g:conjure#log#trim#to"]]]
 [:text "" [:command "g:conjure#log#trim#to"] ""]
 [:text
  "            Trim the log down to this many lines when it gets too long."]
 [:text "            Default: " [:command "7000"] ""]
 [:text ""]
 [:text
  [:section-header
   "                        "
   [:tag "g:conjure#log#strip_ansi_escape_sequences_line_limit"]]]
 [:text
  ""
  [:command "g:conjure#log#strip_ansi_escape_sequences_line_limit"]
  ""]
 [:text
  "            If the chunk of text being appended to the log is less than this"]
 [:text
  "            many lines in length, strip all ANSI escape sequences from it. If"]
 [:text
  "            you set this to "
  [:command "0"]
  " it'll never apply, you can then use an ANSI"]
 [:text
  "            escape sequence highlight plugin to display the colours in the"]
 [:text "            buffer."]
 [:text
  "            A line limit is used to prevent massive output (which probably"]
 [:text
  "            doesn't contain escape sequences) from slowing down your log."]
 [:text "            Default: " [:command "100"] ""]
 [:text ""]
 [:text
  [:section-header
   "                                                          "
   [:tag "g:conjure#log#wrap"]]]
 [:text "" [:command "g:conjure#log#wrap"] ""]
 [:text "            Enable line wrapping in the HUD and log."]
 [:text "            Default: " [:command "false"] ""]
 [:text ""]
 [:text
  [:section-header
   "                                                  "
   [:tag "g:conjure#log#fold#enabled"]]]
 [:text "" [:command "g:conjure#log#fold#enabled"] ""]
 [:text "            Enable or disable folding of results."]
 [:text "            Default: " [:command "false"] ""]
 [:text ""]
 [:text
  [:section-header
   "                                                    "
   [:tag "g:conjure#log#fold#lines"]]]
 [:text "" [:command "g:conjure#log#fold#lines"] ""]
 [:text
  "            Fold results that have a line count >= this value."]
 [:text "            Default: " [:command "10"] ""]
 [:text ""]
 [:text
  [:section-header
   "                                             "
   [:tag "g:conjure#log#fold#marker#start"]]]
 [:text "" [:command "g:conjure#log#fold#marker#start"] ""]
 [:text
  "            Marker to use to represent the start of a log fold."]
 [:text "            Default: " [:command "\"~~~%{\""] ""]
 [:text ""]
 [:text
  [:section-header
   "                                               "
   [:tag "g:conjure#log#fold#marker#end"]]]
 [:text "" [:command "g:conjure#log#fold#marker#end"] ""]
 [:text
  "            Marker to use to represent the end of a log fold."]
 [:text "            Default: " [:command "\"}%~~~\""] ""]
 [:text ""]
 [:text
  [:section-header
   "                                        "
   [:tag "g:conjure#log#jump_to_latest#enabled"]]]
 [:text "" [:command "g:conjure#log#jump_to_latest#enabled"] ""]
 [:text
  "            Should the log buffer always set cursor to the top of the latest"]
 [:text "            evaluation output?"]
 [:text "            Default: " [:command "false"] ""]
 [:text ""]
 [:text
  [:section-header
   "                         "
   [:tag "g:conjure#log#jump_to_latest#cursor_scroll_position"]]]
 [:text
  ""
  [:command "g:conjure#log#jump_to_latest#cursor_scroll_position"]
  ""]
 [:text
  "            After jumping to the latest log entry, this decides where your"]
 [:text
  "            cursor should appear on the screen by adjusting the scroll. Your"]
 [:text
  "            options are "
  [:command "top"]
  ", "
  [:command "center"]
  ", "
  [:command "bottom"]
  " and "
  [:command "none"]
  "."]
 [:text ""]
 [:text
  "            "
  [:command "none"]
  " will just leave the scroll wherever it naturally lands"]
 [:text "            after moving the cursor to the latest log entry."]
 [:text "            Default: " [:command "\"top\""] ""]
 [:text ""]
 [:text
  [:section-header
   "                                      "
   [:tag "g:conjure#extract#context_header_lines"]]]
 [:text "" [:command "g:conjure#extract#context_header_lines"] ""]
 [:text
  "            How many lines of the file should be checked for a context"]
 [:text
  "            (namespace name) such as "
  [:command "(module foo.bar)"]
  " or "
  [:command "(ns foo.bar)"]
  ""]
 [:text
  "            which is used for setting the right context for evaluations."]
 [:text
  "            If you have buffers with huge comment headers you may want to set"]
 [:text "            this higher."]
 [:text
  "            If a specific buffer isn't extracting the context correctly, you"]
 [:text
  "            can override it by setting "
  [:command "b:conjure#context"]
  "."]
 [:text "            Default: " [:command "24"] ""]
 [:text ""]
 [:text
  [:section-header
   "                                                "
   [:tag "g:conjure#extract#form_pairs"]]]
 [:text "" [:command "g:conjure#extract#form_pairs"] ""]
 [:text
  "            Character pairs to search for when evaluating forms. The closest"]
 [:text
  "            matching pair is used when evaluating the current form but the"]
 [:text "            furthest matching pair is used for root forms."]
 [:text
  "            The structure of each item is "
  [:command "[start end escape?]"]
  " where the"]
 [:text
  "            first two are characters and the third is an optional boolean to"]
 [:text
  "            enable escaping for use in "
  [:ref "searchpairpos()"]
  "."]
 [:text
  "            Default: "
  [:command "[[\"(\" \")\"] [\"{\" \"}\"] [\"[\" \"]\" true]]"]
  ""]
 [:text ""]
 [:text
  [:section-header
   "                                       "
   [:tag "g:conjure#extract#tree_sitter#enabled"]]]
 [:text "" [:command "g:conjure#extract#tree_sitter#enabled"] ""]
 [:text
  "            Enable tree-sitter support for extracting code from the buffer."]
 [:text
  "            This is used by non-Lisp clients to find the appropriate chunk of"]
 [:text "            code under the cursor to evaluate."]
 [:text ""]
 [:text "            This is experimental and requires the following:"]
 [:text ""]
 [:text "             * Neovim 0.5+ with tree-sitter support"]
 [:text
  "             * "
  [:url "https://github.com/nvim-treesitter/nvim-treesitter"]
  ""]
 [:text
  "             * The appropriate "
  [:command ":TSInstall [filetype]"]
  " to have already been run."]
 [:text "             * This flag to be " [:command "true"] "."]
 [:text ""]
 [:text
  "            If any of these conditions are not met it'll fall back to looking"]
 [:text
  "            for matching parenthesis in the buffer from the cursors current"]
 [:text "            location."]
 [:text ""]
 [:text
  "            Beware trying to use TreeSitter to highlight your buffer while"]
 [:text
  "            simultaneously asking Conjure to use the legacy regex based form"]
 [:text
  "            extraction by setting this to "
  [:command "false"]
  ". It will not work!"]
 [:text
  "            More information: "
  [:url "https://github.com/Olical/conjure/issues/246"]
  ""]
 [:text ""]
 [:text "            Default: " [:command "true"] ""]
 [:text ""]
 [:text
  [:section-header
   "                                              "
   [:tag "g:conjure#preview#sample_limit"]]]
 [:text "" [:command "g:conjure#preview#sample_limit"] ""]
 [:text
  "            Most evaluation actions create a line in the log buffer with a"]
 [:text
  "            preview of the code that was evaluated as a reminder. This setting"]
 [:text
  "            controls how long that preview should be before it trails off into"]
 [:text
  "            ellipsis. It is a percentage value based on the width of the"]
 [:text
  "            editor. This is so you can align it with the width of your HUD."]
 [:text "            This also affects the preview in folded results."]
 [:text "            A float between 0.0 and 1.0."]
 [:text "            Default: " [:command "0.3"] ""]
 [:text ""]
 [:text
  [:section-header
   "                                                "
   [:tag "g:conjure#relative_file_root"]]]
 [:text "" [:command "g:conjure#relative_file_root"] ""]
 [:text
  "            If set, Conjure will attempt to resolve absolute file paths to a"]
 [:text
  "            relative path based on this value. This means you can evaluate"]
 [:text
  "            files on other machines or inside Docker containers that share a"]
 [:text
  "            common file structure for the project but may be stored in"]
 [:text
  "            different parts of the overall file system. Here's how you could"]
 [:text
  "            resolve all file paths relative to a sub-directory under your"]
 [:text "            Neovim current working directory."]
 [:text ""]
 [:text
  "            "
  [:command
   ":let g:conjure#relative_file_root = getcwd() . \"/sub-proj\""]
  ""]
 [:text ""]
 [:text
  "            Now "
  [:command "/foo/bar/sub-proj/baz.clj"]
  " would be "
  [:command "baz.clj"]
  " if your Neovim"]
 [:text "            CWD was " [:command "/foo/bar"] "."]
 [:text ""]
 [:text "            See also " [:command "g:conjure#path_subs"] "."]
 [:text ""]
 [:text "            Default: " [:command "undefined"] ""]
 [:text ""]
 [:text
  [:section-header
   "                                                         "
   [:tag "g:conjure#path_subs"]]]
 [:text "" [:command "g:conjure#path_subs"] ""]
 [:text
  "            If set Conjure will modify paths on \"go to definition\" as well as"]
 [:text
  "            \"eval file\". The path will be substituted using Lua's"]
 [:text
  "            "
  [:command "string.gsub"]
  " function. The keys of the "
  [:command "path_subs"]
  " table are the"]
 [:text "            patterns and the values are the replacements."]
 [:text ""]
 [:text
  "            Lua pattern documentation: "
  [:url "https://www.lua.org/pil/20.2.html"]
  ""]
 [:text "           "]
 [:example
  "              {\"/root/.m2\" \"/home/ollie/.m2\"\n               \"/src/app\" \".\"\n               \"^(/home)/foo\" \"%1/bar\"}"]
 [:text
  "            This can be used when connecting to REPLs outside of your local"]
 [:text
  "            machine or within Docker containers where the filesystems don't"]
 [:text "            quite match up."]
 [:text ""]
 [:text
  "            See also "
  [:command "g:conjure#relative_file_root"]
  "."]
 [:text ""]
 [:text "            Default: " [:command "undefined"] ""]
 [:text ""]
 [:text
  [:section-header
   "                                                             "
   [:tag "g:conjure#debug"]]]
 [:text "" [:command "g:conjure#debug"] ""]
 [:text
  "            Display debug information in any client you're using."]
 [:text "            Default: " [:command "false"] ""]
 [:text ""]
 [:text
  [:section-header
   "                                                           "
   [:tag "b:conjure#context"]]]
 [:text "" [:command "b:conjure#context"] ""]
 [:text
  "            Override the context name for a specific buffer, preventing"]
 [:text
  "            Conjure from attempting to extract it from the first few lines"]
 [:text
  "            defined by the "
  [:command "g:conjure#extract#context_header_lines"]
  ""]
 [:text "            configuration value."]
 [:text "            Default: " [:command "undefined"] ""]
 [:text ""]
 [:text
  [:divider
   "=============================================================================="]]
 [:text
  [:section-header
   "LOG                                                              "
   [:tag "conjure-log"]]]
 [:text ""]
 [:text
  "The log buffer is a regular buffer that you can edit and interact with as you"]
 [:text
  "normally would. You can even insert new code and evaluate it, seeing the"]
 [:text
  "results at the bottom of the buffer, kind of like a regular REPL."]
 [:text ""]
 [:text
  "The log buffer will scroll along with new results if you leave your cursor on"]
 [:text
  "the last line, like a terminal following along with new output."]
 [:text ""]
 [:text
  "If you'd like to stop it scrolling and just see a specific result for a while"]
 [:text
  "you can move your cursor to it. Conjure will then leave that cursor where it"]
 [:text
  "is, it'll only follow along if left on the last line of the buffer. To"]
 [:text
  "continue following new output you can press "
  [:command "G"]
  " to go to the bottom."]
 [:text ""]
 [:text
  "If a result is appended to the end of the log and you don't currently have a"]
 [:text
  "log on your screen with the cursor following along, the HUD will"]
 [:text
  "appear (unless you've disabled it through config). This is to ensure you"]
 [:text
  "always see new entries, even if you're looking at something further up in the"]
 [:text "log."]
 [:text ""]
 [:text
  "The HUD is a floating window that shows you the current tail of the log. It"]
 [:text
  "tries to show you the top of extremely large results since the top of a data"]
 [:text
  "structure tends to be more interesting than the bottom. It'll vanish when you"]
 [:text
  "move the cursor and can be turned off entirely through configuration."]
 [:text ""]
 [:text
  "The log will be automatically trimmed when it gets too long, this can be"]
 [:text
  "tweaked with configuration. It will attempt to trim to a known good break"]
 [:text
  "point so as to not cut a large data structure or string in half resulting in"]
 [:text "broken highlighting in the rest of the log buffer."]
 [:text ""]
 [:text
  "Note: The HUD may be unreadable if your theme defines odd colours for the"]
 [:text
  ""
  [:command "Pmenu"]
  " highlight group. You can set a different background colour by theming"]
 [:text
  ""
  [:command "NormalFloat"]
  " or "
  [:command "Pmenu"]
  " with something like the following."]
 [:text ""]
 [:text
  [:divider
   "=============================================================================="]]
 [:text
  [:section-header
   "AUTOCMDS                                                    "
   [:tag "conjure-autocmds"]]]
 [:text ""]
 [:text
  "Conjure emits custom "
  [:ref "User"]
  " "
  [:ref "autocmds"]
  " when certain things happen, such as when"]
 [:text
  "you perform an evaluation. You can use these to trigger other behaviour or"]
 [:text "plugins as you see fit."]
 [:example
  "  autocmd User ConjureEval if expand(\"%:t\") =~ \"^conjure-log-\" | exec \"normal G\" | endif\n"]
 [:text
  "This example will cause all evaluations inside the Conjure log to jump the"]
 [:text
  "cursor to the bottom of the buffer, providing a slightly more REPL like"]
 [:text "experience."]
 [:text ""]
 [:text
  "If there's an event you need and think would be a good general fit for the"]
 [:text
  "project, feel free to raise an issue to discuss it (and potentially submit a"]
 [:text "pull request if we agree!)."]
 [:text ""]
 [:text
  [:section-header
   "                                                                 "
   [:tag "ConjureEval"]]]
 [:text "" [:command "ConjureEval"] ""]
 [:text "            After an evaluation of any kind."]
 [:text ""]
 [:text
  [:section-header
   "                                                             "
   [:tag "ConjureEvalFile"]]]
 [:text "" [:command "ConjureEvalFile"] ""]
 [:text "            After an evaluation of a file from disk."]
 [:text ""]
 [:text
  [:section-header
   "                                                              "
   [:tag "ConjureEvalStr"]]]
 [:text "" [:command "ConjureEvalStr"] ""]
 [:text
  "            After an evaluation of an arbitrary string (from evaluating a"]
 [:text "            form, buffer, range, command etc)."]
 [:text ""]
 [:text
  [:section-header
   "                                                                  "
   [:tag "ConjureDoc"]]]
 [:text "" [:command "ConjureDoc"] ""]
 [:text "            After requesting documentation."]
 [:text ""]
 [:text
  [:section-header
   "                                                                  "
   [:tag "ConjureDef"]]]
 [:text "" [:command "ConjureDef"] ""]
 [:text "            After requesting definition lookup."]
 [:text ""]
 [:text
  [:divider
   "=============================================================================="]]
 [:text
  [:section-header
   "CLIENTS                                                      "
   [:tag "conjure-clients"]]]
 [:text ""]
 [:text
  "Conjure comes bundled with a set of built in clients, you can access their"]
 [:text
  "documentation below or through the "
  [:command ":help conjure-client-*"]
  " command. You can"]
 [:text
  "install more clients through 3rd party plugins or simply write your own within"]
 [:text "your dotfiles."]
 [:text ""]
 [:text " - " [:ref "conjure-client-fennel-aniseed"] ""]
 [:text " - " [:ref "conjure-client-fennel-stdio"] ""]
 [:text " - " [:ref "conjure-client-clojure-nrepl"] ""]
 [:text " - " [:ref "conjure-client-janet-netrepl"] ""]
 [:text " - " [:ref "conjure-client-hy-stdio"] ""]
 [:text " - " [:ref "conjure-client-racket-stdio"] ""]
 [:text " - " [:ref "conjure-client-scheme-stdio"] ""]
 [:text " - " [:ref "conjure-client-guile-socket"] ""]
 [:text ""]
 [:text
  "Language clients are simply Lua modules (which can be compiled from Fennel"]
 [:text
  "using Aniseed) that have a few essential properties and functions in them."]
 [:text ""]
 [:text
  "The module doesn't have to be within Conjure's source tree, it can be inside a"]
 [:text
  "3rd party plugin repository, you can connect a filetype to it with the"]
 [:text
  ""
  [:command "g:conjure#filetype#[filetype]"]
  " configuration option."]
 [:text ""]
 [:text
  "When implementing a new language client you'll need to provide the following"]
 [:text
  "values and functions at the top level of your module. You can split your"]
 [:text
  "client up into separate modules and just build this API into your init module."]
 [:text
  "See "
  [:command "fnl/conjure/client/clojure/nrepl/init.fnl"]
  " for an example of this."]
 [:text ""]
 [:text "" [:command "buf-suffix"] ""]
 [:text "            String"]
 [:text
  "            Last part of the log buffer name which helps with setting the"]
 [:text
  "            filetype among other things depending on what plugins a user may"]
 [:text
  "            have installed. For example, Fennel's is "
  [:command "\".fnl\""]
  " and Clojure's is"]
 [:text
  "            "
  [:command "\".cljc\""]
  ". Whatever suits your language, it's up to you!"]
 [:text ""]
 [:text "" [:command "context-pattern"] ""]
 [:text "            String"]
 [:text
  "            Lua pattern to identify the module or namespace name from the"]
 [:text
  "            first few lines of the buffer. Used to set the context for each"]
 [:text
  "            user evaluation. Clojure's is "
  [:command "%(%s*ns%s*(.-)[%s){]"]
  ", alter as you"]
 [:text
  "            see fit for your language. The value in the first capture group is"]
 [:text
  "            passed into later functions as "
  [:command "opts.context"]
  "."]
 [:text
  "            If this doesn't suit your needs, leave it "
  [:command "nil"]
  " and define a"]
 [:text "            " [:command "context"] " function instead."]
 [:text ""]
 [:text "" [:command "context"] ""]
 [:text "            Function(header)"]
 [:text
  "            Called instead of "
  [:command "context-pattern"]
  " if it's not defined. Is passed"]
 [:text
  "            the first few lines of the buffer as it's only argument. You can"]
 [:text
  "            parse out the context string in any way you see fit."]
 [:text
  "            The return value is passed into later functions as "
  [:command "opts.context"]
  "."]
 [:text ""]
 [:text "" [:command "comment-prefix"] ""]
 [:text "            String"]
 [:text
  "            Proceeds lines that describe what kind of evaluation has taken"]
 [:text
  "            place (among other things), you don't want those to be highlighted"]
 [:text
  "            as code so they're turned into comments by placing this string"]
 [:text
  "            before them. For Lisps you probably want to use "
  [:command "\"; \""]
  ", notice the"]
 [:text "            trailing space!"]
 [:text ""]
 [:text "" [:command "eval-str"] ""]
 [:text "            Function(opts)"]
 [:text
  "            Takes a single argument table "
  [:command "opts"]
  " which contains the following:"]
 [:text "             - " [:command "opts.code"] ""]
 [:text
  "                 String to be embedded in your evaluation. You can wrap it"]
 [:text
  "                 with whatever padding code you require. This is what the user"]
 [:text "                 selected for evaluation."]
 [:text "             - " [:command "opts.context"] ""]
 [:text
  "                 String extracted using "
  [:command "context-pattern"]
  " or "
  [:command "nil"]
  " if nothing"]
 [:text
  "                 could be found. At that point you should default it to"]
 [:text
  "                 something sensible or not set the context of your evaluation"]
 [:text "                 at all."]
 [:text "             - " [:command "opts.action"] ""]
 [:text
  "                 Always "
  [:command "\"eval\""]
  " in this case."]
 [:text "             - " [:command "opts.file-path"] ""]
 [:text
  "                 Path to the buffer the user is evaluating from."]
 [:text "             - " [:command "opts.origin"] ""]
 [:text
  "                 What the evaluation originated from such as "
  [:command "\"current-form\""]
  "."]
 [:text "             - " [:command "opts.preview"] ""]
 [:text
  "                 A comment that's appended to the log for you describing what"]
 [:text
  "                 action the user just took for future reference. It lends"]
 [:text
  "                 context to your follow up log entries with results."]
 [:text "             - " [:command "opts.range"] ""]
 [:text
  "                 Contains "
  [:command "start"]
  " and "
  [:command "end"]
  " tuples that mark the starting and"]
 [:text
  "                 ending row and column for the code that was extracted from"]
 [:text "                 the buffer."]
 [:text "             - " [:command "opts.on-result"] ""]
 [:text
  "                 An optional function, when it's present you should call it"]
 [:text
  "                 with the result of the evaluation as a string. This is used"]
 [:text
  "                 when evaluating code and replacing it in the buffer it came"]
 [:text
  "                 from. Such as evaluating "
  [:command "(+ 10 20)"]
  " and replacing the"]
 [:text "                 original form with " [:command "30"] "."]
 [:text ""]
 [:text "" [:command "doc-str"] ""]
 [:text "            Function(opts)"]
 [:text
  "            Almost identical to "
  [:command "eval-str"]
  " even down to taking the same"]
 [:text
  "            arguments. Instead of just evaluating "
  [:command "opts.code"]
  " though it should"]
 [:text
  "            wrap it in whatever code necessary to produce documentation output"]
 [:text
  "            for the given code. "
  [:command "opts.code"]
  " will probably be a single keyword."]
 [:text
  "            In the case of Clojure it's wrapped in "
  [:command "(doc ...)"]
  ", if your"]
 [:text
  "            language doesn't implement documentation lookup you can skip this"]
 [:text
  "            function or have it print a warning. The Clojure implementation"]
 [:text
  "            actually leans on it's own "
  [:command "eval-str"]
  "."]
 [:text ""]
 [:text "" [:command "def-str"] ""]
 [:text "            Function(opts)"]
 [:text
  "            Similar to "
  [:command "doc-str"]
  " but it should jump the user to the definition"]
 [:text
  "            of the value in "
  [:command "opts.code"]
  " using the "
  [:command "conjure.editor/go-to"]
  ""]
 [:text
  "            function (or similar, it's up to you how you implement it)."]
 [:text
  "            If your language doesn't support looking up definitions you can"]
 [:text "            leave the function out or print a warning."]
 [:text ""]
 [:text "" [:command "completions"] ""]
 [:text "            Function(opts)"]
 [:text
  "            Called with a single argument table called "
  [:command "opts"]
  ", containing the"]
 [:text "            following values."]
 [:text "             - " [:command "opts.prefix"] ""]
 [:text
  "                 The string you should be completing for the user."]
 [:text "             - " [:command "opts.cb"] ""]
 [:text
  "                 A callback function to be invoked with the results."]
 [:text "                 Completion results should conform to what"]
 [:text
  "                 "
  [:ref "complete-functions"]
  " return in a normal "
  [:ref "omnifunc"]
  "."]
 [:text "             - " [:command "opts.context"] ""]
 [:text
  "                 Same as the context in "
  [:command "eval-str"]
  ", can be used to calculate"]
 [:text
  "                 completions based on the file the user is working on."]
 [:text
  "            If you don't provide this function all completion attempts will"]
 [:text
  "            work, they'll just default to returning no results, it shouldn't"]
 [:text "            produce errors or warnings."]
 [:text
  "            Asynchronous completion plugins that have Conjure support will"]
 [:text
  "            call this function, so you'll get automatic completions as you"]
 [:text "            type right away."]
 [:text ""]
 [:text "" [:command "eval-file"] ""]
 [:text "            Function(opts)"]
 [:text
  "            Again, similar to "
  [:command "eval-str"]
  ", you should just perform an"]
 [:text
  "            appropriate evaluation (maybe using your own "
  [:command "eval-str"]
  ") to load"]
 [:text
  "            "
  [:command "opts.file-path"]
  " from disk, however that should be done in your"]
 [:text "            language."]
 [:text ""]
 [:text "" [:command "on-filetype"] ""]
 [:text "            Function()"]
 [:text
  "            Called when the filetype your client is associated with is opened."]
 [:text
  "            This is the time for you to set up your own mappings and buffer"]
 [:text
  "            local commands using the "
  [:command "conjure.mapping"]
  " module where required."]
 [:text
  "            You can create your own mappings based on your own configuration,"]
 [:text
  "            just like the Fennel + Aniseed module. It's called every time a"]
 [:text "            file associated with your client is opened."]
 [:text ""]
 [:text "" [:command "on-load"] ""]
 [:text "            Function()"]
 [:text
  "            Much like "
  [:command "on-filetype"]
  " but it's only called as the client is"]
 [:text
  "            loaded for the first time. You can use this to register"]
 [:text
  "            autocommands or perform one off actions the first time a user"]
 [:text
  "            opens a file of a relevant filetype. In the case of Clojure, this"]
 [:text
  "            is when it attempts to connect to a "
  [:command ".nrepl-port"]
  " file and hooks"]
 [:text
  "            up an autocommand to clean up any existing nREPL connection before"]
 [:text "            Neovim exits."]
 [:text ""]
 [:text "" [:command "on-exit"] ""]
 [:text "            Function()"]
 [:text
  "            Called by the "
  [:ref "ExitPre"]
  " autocommand, use this hook to tidy up"]
 [:text
  "            child processes, close non-essential windows and destroy"]
 [:text
  "            connections. This can help Neovim exit cleanly in some situations."]
 [:text ""]
 [:text "" [:command "connect"] ""]
 [:text "            Function(opts)"]
 [:text
  "            Called with an "
  [:command "opts"]
  " table that contains the following when the"]
 [:text
  "            user uses the "
  [:command ":ConjureConnect"]
  " command."]
 [:text "             - " [:command "opts.host"] ""]
 [:text
  "                 First argument to "
  [:command ":ConjureConnect"]
  " or "
  [:command "nil"]
  " if there was"]
 [:text "                 only one argument."]
 [:text "             - " [:command "opts.port"] ""]
 [:text
  "                 Second argument to "
  [:command ":ConjureConnect"]
  " or "
  [:command "nil"]
  " if there were"]
 [:text
  "                 zero arguments. In this case you can error or try to \"do the"]
 [:text "                 right thing\" for your given context."]
 [:text
  "            You do not need to provide this if there are no connection steps"]
 [:text
  "            for your client such as a purely stdio based client running within"]
 [:text "            Neovim as a sub-process."]
 [:text ""]
 [:text "" [:command "form-node?"] ""]
 [:text "            Function(node)"]
 [:text
  "            When tree-sitter is in use this will be called with each node"]
 [:text
  "            considered when looking for the \"current form under the cursor\"."]
 [:text
  "            Your client can then (optionally) accept or reject the node by"]
 [:text
  "            returning "
  [:command "true"]
  " or "
  [:command "false"]
  ". For example, Lisp clients probably"]
 [:text
  "            want to reject any form that doesn't start with an opening"]
 [:text "            parenthesis."]
 [:text ""]
 [:text "vim:tw=78:sw=2:ts=2:ft=help:norl:et:listchars="]]
